<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Mail;
use Stripe\Stripe;
use Stripe\PaymentIntent;
use App\Models\Order;
use App\Models\Cart;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Notification;
use App\Notifications\OrderConfirmedNotification;
use App\Mail\SendCodes; // Import the SendCodes Mailable class

class PaymentController extends Controller
{
    /**
     * Affiche le formulaire de paiement
     */
    public function show()
    {
        // RÃ©cupÃ©rer le panier de l'utilisateur et calculer le montant total
        $cart = Auth::user()->cart;
        $totalPrice = $cart->products->sum(function($product) {
            return $product->pivot->price * $product->pivot->quantity;
        });

        // CrÃ©er un PaymentIntent pour le paiement
        Stripe::setApiKey(env('STRIPE_SECRET_KEY'));
        $paymentIntent = PaymentIntent::create([
            'amount' => $totalPrice * 100, // Montant en centimes
            'currency' => 'eur',
            'metadata' => [
                'user_id' => Auth::id(), // Associe l'utilisateur
            ],
        ]);

        // Passer les donnÃ©es Ã  la vue
        return view('payment.show', [
            'totalPrice' => $totalPrice,
            'stripePublicKey' => env('STRIPE_PUBLIC_KEY'),
            'clientSecret' => $paymentIntent->client_secret,
        ]);
    }

    /**
     * Traitement du paiement et crÃ©ation de la commande
     */
    public function process(Request $request)
{
    Stripe::setApiKey(env('STRIPE_SECRET_KEY'));

    try {
        // RÃ©cupÃ©rer l'ID du PaymentIntent depuis la requÃªte
        $paymentIntentId = $request->input('paymentIntentId');
        $paymentIntent = \Stripe\PaymentIntent::retrieve($paymentIntentId);

        // VÃ©rifiez si le paiement est rÃ©ussi
        if ($paymentIntent->status === 'succeeded') {
            Log::info('Paiement rÃ©ussi pour PaymentIntent ID : ' . $paymentIntentId);

            // RÃ©cupÃ©rer l'utilisateur et son panier
            $user = Auth::user();
            $cart = $user->cart;

            if (!$cart) {
                Log::error('Aucun panier trouvÃ© pour l\'utilisateur ID : ' . $user->id);
                return response()->json(['success' => false, 'message' => 'Erreur : Aucun panier trouvÃ©.']);
            }

            $addressId = session('checkout_address_id');

            if (!$addressId) {
                Log::error('Aucune adresse enregistrÃ©e en session.');
                return response()->json(['success' => false, 'message' => 'Erreur : Aucune adresse sÃ©lectionnÃ©e.']);
            }
            
            Log::info('Adresse rÃ©cupÃ©rÃ©e pour la commande : ' . $addressId);
            

            // Calculer le total du panier
            $totalPrice = $cart->products->sum(function ($product) {
                return $product->pivot->price * $product->pivot->quantity;
            });

            Log::info('Total du panier calculÃ© : ' . $totalPrice);

            // CrÃ©er une nouvelle commande
            $order = Order::create([
                'user_id' => $user->id,
                'total_price' => $totalPrice,
                'status' => 'Pending', // Marquer la commande comme terminÃ©e
            ]);

            Log::info('Commande crÃ©Ã©e avec ID : ' . $order->id);

            // Ajouter les produits du panier Ã  la commande
            foreach ($cart->products as $product) {
                $order->orderDetails()->create([
                    'product_id' => $product->id,
                    'platform_id' => $product->pivot->platform_id, // Ajouter la plateform
                    'quantity' => $product->pivot->quantity,
                    'price_each' => $product->pivot->price,
                    'address_id' => $addressId, // Associer l'adresse ici

                ]);
            }

            Log::info('Produits ajoutÃ©s Ã  la commande ID : ' . $order->id);

            Log::info('ðŸ“§ Envoi immÃ©diat de lâ€™email de confirmation Ã  : ' . $user->email);
            Notification::sendNow($user, new OrderConfirmedNotification($order));


            Log::info('âœ… Email envoyÃ©.');


            // $codes = [];
            // for ($i = 0; $i < 12; $i++) {
            //     $codes[] = strtoupper(bin2hex(random_bytes(12)));
            // }
            // Mail::to(users: $user->email)->send(new SendCodes($order, $codes)); // Ensure $user->email is used correctly
            // // Mail::to($order->user_id->email)->send(new SendCodes($order, $codes));

            // Vider le panier
            $cart->products()->detach();
            Log::info('Panier vidÃ© pour l\'utilisateur ID : ' . $user->id);

            // Supprimer l'adresse de la session aprÃ¨s utilisation
            session()->forget('checkout_address_id');

            
            

            return response()->json(['success' => true, 'message' => 'Commande crÃ©Ã©e avec succÃ¨s.']);
        } else {
            Log::warning('Paiement non rÃ©ussi pour PaymentIntent ID : ' . $paymentIntentId);
            return response()->json(['success' => false, 'message' => 'Paiement non confirmÃ©.']);
        }
    } catch (\Exception $e) {
        Log::error('Erreur lors du traitement du paiement : ' . $e->getMessage());
        return response()->json(['success' => false, 'message' => 'Erreur lors du traitement du paiement.']);
    }
}

}
